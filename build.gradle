import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
        	maven { url "http://repo.spring.io/plugins-release" }
        	maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('com.github.ksoichiro:gradle-console-reporter:0.5.0')
		classpath ('com.bmuschko:gradle-docker-plugin:3.2.5')
		classpath "com.avast.gradle:gradle-docker-compose-plugin:0.7.1"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "jacoco"
apply plugin: "io.spring.dependency-management"
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ksoichiro.console.reporter'
apply plugin: 'docker-compose'

defaultTasks 'bootRun'

group = 'com.crossover.techtrial'
version = '0.0.3-SNAPSHOT'

sourceCompatibility = 1.8

dockerCompose.isRequiredBy(test)

dockerCompose {
    useComposeFiles = ['mysql.yml'] // like 'docker-compose -f <file>'; default is empty
    // startedServices = ['web'] // list of services to execute when calling 'docker-compose up' or 'docker-compose pull' (when not specified, all services are executed)
    // scale = [${serviceName1}: 5, ${serviceName2}: 2] // Pass docker compose --scale option like 'docker-compose up --scale serviceName1=5 --scale serviceName2=2'
    // forceRecreate = false // pass '--force-recreate' when calling 'docker-compose up' when set to 'true`
    // buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true
    // ignorePullFailure = false // when set to true, pass '--ignore-pull-failure' to 'docker-compose pull'
    // buildAdditionalArgs = ['--force-rm']
    // pullAdditionalArgs = ['--ignore-pull-failures']
    // upAdditionalArgs = ['--no-deps']
    // downAdditionalArgs = ['--some-switch']

    // waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
    // captureContainersOutput = false // if true, prints output of all containers to Gradle output - very useful for debugging; default is false
    // captureContainersOutputToFile = '/path/to/logFile' // sends output of all containers to a log file

    // stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
    // removeContainers = true
    // removeImages = "None" // Other accepted values are: "All" and "Local"
    // removeVolumes = true
    // removeOrphans = false // removes containers for services not defined in the Compose file
    
    // projectName = 'my-project' // allow to set custom docker-compose project name (defaults to directory name)
    // executable = '/path/to/docker-compose' // allow to set the path of the docker-compose executable (useful if not present in PATH)
    // dockerExecutable = '/path/to/docker' // allow to set the path of the docker executable (useful if not present in PATH)
    // dockerComposeWorkingDirectory = '/path/where/docker-compose/is/invoked/from'
    // dockerComposeStopTimeout = java.time.Duration.ofSeconds(20) // time before docker-compose sends SIGTERM to the running containers after the composeDown task has been started
    // environment.put 'BACKEND_ADDRESS', '192.168.1.100' // Pass environment variable to 'docker-compose' for substitution in compose file
}

dependencies {
	compile('org.modelmapper:modelmapper:1.1.0')
	compile('com.google.guava:guava:24.0-jre')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('com.fasterxml.jackson.core:jackson-core')
	testCompile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.liquibase:liquibase-core')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

task copyDockerFiles(type: Copy) {
    description = "Copy Dockerfile and required data to build directory"
    from 'src/main/docker'
    from "${project.buildDir}/libs"
    into { "${project.buildDir}/docker" }
    include "*"
    exclude "**/*.yml"
}

task buildDocker(type: DockerBuildImage, dependsOn: 'copyDockerFiles') {
    description = "Package application as Docker image"
    group = "Docker"
    inputDir = project.file("${project.buildDir}/docker")
    tags = ["crossblogs:latest".toString(), "crossblogs:${project.version}".toString()]
}